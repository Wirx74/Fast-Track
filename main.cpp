#include <iostream>
#include <bitset>

void invertBits(uint8_t* x, size_t startByte, size_t numBytes, uint8_t mask) { // Функция принимает по указателю массив битов, стартовый байт, количество байт,
    for (size_t i = startByte; i < startByte + numBytes; ++i) {                // и маску для инвентирования 
        x[i] ^= mask;  // применяем маску для инвентирования
        std::cout << "After byte :" << i << ": " << std::bitset<8>(x[i]) << "\n"; // Выводим в консоль принвентированые байты
    }
}

int main() {
    uint8_t x[6] = { 0b10101010, 0b11111111, 0b00000000, 0b11111111, 0b00000000, 0b11111111 }; // Создаем массив битов

    int startByte = 0;  // Задаем с какого байта начнется инвертирование битов
    int numBytes = 3;  // Задаем количество байтов которые будут проинвертированы
    int leftSide = 3;  // Задаем с какого бита с лева начнется инвертирование
    int rightSide = 7; // Задаем бит с права на котором закончится инвертирование
    int countBits = (rightSide - leftSide) + 1;  // Вычисляем количество битов которые будут проинвертированы
    int shift = 8 - rightSide; // Вычисляем смещение с правой стороны для инвертации битов
    uint8_t mask = static_cast<uint8_t>((1 << countBits) - 1) << shift; // Создаем маску для инвертирования битов. ((1 << countBits) - 1) - сдесь вычисляется количество битов для инвертирования
    // 1u для инвертирования 1 бита 3u для инвертирования 2 бит, 7u для инвертирования 3 бит, 15u для инвертирования 4 бит и так далее.

    for (int i = 0; i < 6; ++i) {
        std::cout << "Before byte:" << i << ": " << std::bitset<8>(x[i]) << "\n"; // Выводим в консоль байты до инвертирования
    }

    invertBits(x, startByte, numBytes, mask); // Вызываем функцию инвертирования.

    return 0;
}